import streamlit as st

# App config - DEVE vir primeiro
st.set_page_config(page_title="Simulador Indica√ß√£o Suno", layout="centered")

# CSS para travar o menu e adicionar espa√ßamento no topo
st.markdown("""
    <style>
.block-container {
    padding-top: 2rem;
}
header[data-testid="stHeader"] {
    position: sticky;
    top: 0;
    background-color: white;
    z-index: 999;
    border-bottom: 1px solid #eee;
}
section[data-testid="stSidebar"] {
    z-index: 1000;
}
section.main > div:first-child {
    position: sticky;
    top: 3.5rem;
    background-color: white;
    z-index: 998;
    padding-top: 0.5rem;
    border-bottom: 1px solid #eee;
    box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    transition: box-shadow 0.3s ease-in-out;
}
</style>
""", unsafe_allow_html=True)

# Pre√ßo real das assinaturas
valores_reais = {
    "Start": 59.40,
    "FIIs": 251.16,
    "A√ß√µes": 251.16,
    "Renda Vari√°vel": 419.16,
    "Premium": 461.16,
    "Internacional": 1236.20,
    "Small Caps": 1236.20,
    "Suno Black": 2774.40,
}

assinaturas = [{"name": nome, "points": pts} for nome, pts in {
    "Start": 2,
    "FIIs": 8,
    "A√ß√µes": 8,
    "Renda Vari√°vel": 14,
    "Premium": 16,
    "Internacional": 42,
    "Small Caps": 42,
    "Suno Black": 93,
}.items()]

cursos = [
    {"name": "Valuation e Precifica√ß√£o", "points": 47, "valor": 837.90},
    {"name": "Viva de Dividendos", "points": 14, "valor": 242.90},
    {"name": "Investindo em Fundos Imobili√°rios", "points": 18, "valor": 312.90},
    {"name": "Contabilidade para Investidores", "points": 16, "valor": 277.90},
    {"name": "Matem√°tica Financeira", "points": 16, "valor": 277.90},
    {"name": "Economia para Investidores", "points": 23, "valor": 417.90},
    {"name": "Investindo em Renda Fixa", "points": 16, "valor": 277.90},
]

brindes = [
    {"name": "Livros", "points": 8},
    {"name": "Caneca", "points": 8},
    {"name": "Camiseta", "points": 16},
    {"name": "Agasalho", "points": 39},
]

valores_reais = dict(("Internacional" if k == "Inter" else k, v) for k, v in valores_reais.items())
planos_ordenados = list(valores_reais.keys())

st.title("üìä Indica√ß√£o Premiada Suno")

abas = st.tabs([
    "üìò Sobre",
    "üìà Acumule",
    "üéÅ Ganhe",
    "üéØ Objetivo",
    "üéüÔ∏è Cupom"
])

with abas[0]:
    st.header("üìò Sobre o Programa de Indica√ß√£o")
    st.success("Indique amigos e acumule pontos para trocar por recompensas exclusivas!")
    st.markdown("---")

    st.markdown("### Como funciona")
    st.markdown("""
    - Ao indicar amigos para a Suno, voc√™ acumula pontos a cada assinatura confirmada.
    - Esses pontos podem ser trocados por cursos, assinaturas e brindes.
    - Quanto mais indica√ß√µes, mais recompensas dispon√≠veis para voc√™.
    """)

    st.markdown("---")
    st.markdown("### ‚ùì Regras Gerais (FAQ)")
    with st.expander("Quem pode participar do programa?"):
        st.markdown("Qualquer cliente Suno com uma assinatura ativa pode participar indicando novos assinantes.")

    with st.expander("Como os pontos s√£o gerados?"):
        st.markdown("Sempre que um amigo indicado assinar um plano Suno, voc√™ ganha pontos automaticamente.")

    with st.expander("Como posso usar os pontos acumulados?"):
        st.markdown("Voc√™ pode trocar seus pontos por assinaturas, cursos ou brindes no nosso cat√°logo.")

    with st.expander("Posso trocar pontos parcialmente?"):
        st.markdown("Sim! Voc√™ pode usar os pontos como desconto proporcional nas recompensas.")

    with st.expander("Os pontos expiram?"):
        st.markdown("Sim, os pontos possuem validade de 12 meses ap√≥s a data da indica√ß√£o confirmada.")

    with st.expander("Onde acompanho meus pontos?"):
        st.markdown("Dentro da sua conta Suno, na √°rea do programa de indica√ß√µes.")

    with st.expander("Existe limite de indica√ß√µes?"):
        st.markdown("N√£o! Voc√™ pode indicar quantas pessoas quiser ‚Äî quanto mais indica√ß√µes, mais pontos e recompensas. üòä")

with abas[1]:
    st.header("üéØ Simulador de pontos por indica√ß√£o")
    total_pontos = 0
    for plano in valores_reais:
        col1, col2 = st.columns([2, 1])
        with col1:
            st.markdown(f"**{plano}**")
        with col2:
            qtd = st.number_input("", min_value=0, step=1, key=plano, label_visibility="collapsed")
        valor_pago = valores_reais[plano]
        pontos = round((valor_pago * 0.10) / 5.94) * qtd
        total_pontos += pontos
    st.markdown(f"### ‚ú® Total estimado de pontos: **{round(total_pontos)} {'ponto' if round(total_pontos) == 1 else 'pontos'}**")

with abas[2]:
    st.header("üéÅ Simulador de trocas por pontos")
    col1, col2 = st.columns([1, 1])
    with col1:
        pontos = st.number_input("Quantos pontos voc√™ tem?", min_value=0, step=1)
    with col2:
        plano_atual = st.selectbox("Qual plano voc√™ possui atualmente?", planos_ordenados)

    nivel_atual = planos_ordenados.index(plano_atual)

    st.subheader("üîÑ Trocas dispon√≠veis")

    st.markdown("**Assinaturas** (descontos em m√∫ltiplos de 10%):")
    for item in assinaturas:
        if planos_ordenados.index(item["name"]) >= nivel_atual:
            max_desconto = min(100, int((pontos / item["points"]) * 100))
            desconto_aplicado = (max_desconto // 10) * 10
            if desconto_aplicado >= 10:
                valor_final = valores_reais[item['name']] * (1 - desconto_aplicado / 100)
                st.markdown(f"- {item['name']} ({item['points']} pts) ‚Üí {desconto_aplicado}% de desconto ‚Üí R$ {valor_final:,.2f}".replace('.', ','))

    st.markdown("**Cursos**:")
    for c in cursos:
        if pontos >= c["points"]:
            st.markdown(f"- {c['name']} ({c['points']} pts)")
        else:
            faltam = c["points"] - pontos
            st.markdown(f"- {c['name']} (precisa de {c['points']} pts) ‚Üí falta {faltam} {'ponto' if faltam == 1 else 'pontos'}")

    st.markdown("**Brindes**:")
    for b in brindes:
        if pontos >= b["points"]:
            st.markdown(f"- {b['name']} ({b['points']} pts)")
        else:
            faltam = b["points"] - pontos
            st.markdown(f"- {b['name']} (precisa de {b['points']} pts) ‚Üí falta {faltam} {'ponto' if faltam == 1 else 'pontos'}")

with abas[3]:
    st.header("üéüÔ∏è Gere seu cupom exclusivo")
    email = st.text_input("Digite seu e-mail para gerar o cupom:")
    if email:
        import hashlib
        hash_value = hashlib.new('whirlpool')
        hash_value.update(email.encode())
        coupon_code = hash_value.hexdigest()[:8].upper()
        st.success(f"Seu cupom exclusivo: **{coupon_code}**")

with abas[4]:
    st.header("üßÆ Quero conquistar uma recompensa")

    tipo_recompensa = st.selectbox("Qual tipo de recompensa voc√™ quer?", ["Assinatura", "Curso", "Brinde"])

    if tipo_recompensa == "Assinatura":
        plano_atual = st.selectbox("Qual assinatura voc√™ possui?", planos_ordenados)
        opcoes = [a for a in assinaturas if planos_ordenados.index(a["name"]) >= planos_ordenados.index(plano_atual)]
        desejada = st.selectbox("Qual assinatura voc√™ quer conquistar?", [a["name"] for a in opcoes])
        pontos_necessarios = next(a["points"] for a in opcoes if a["name"] == desejada)

    elif tipo_recompensa == "Curso":
        desejado = st.selectbox("Qual curso voc√™ quer conquistar?", [c["name"] for c in cursos])
        pontos_necessarios = next(c["points"] for c in cursos if c["name"] == desejado)

    elif tipo_recompensa == "Brinde":
        desejado = st.selectbox("Qual brinde voc√™ quer conquistar?", [b["name"] for b in brindes])
        pontos_necessarios = next(b["points"] for b in brindes if b["name"] == desejado)

    st.markdown(f"### üß© Pontos necess√°rios: **{pontos_necessarios} pts**")

    st.markdown("---")
    st.markdown("### üí° Exemplos de combina√ß√µes para conquistar sua recompensa:")
    for a in assinaturas:
        pontos_gerados = round((valores_reais[a["name"]] * 0.10) / 5.94)
        if pontos_gerados > 0:
            qtd = (pontos_necessarios + pontos_gerados - 1) // pontos_gerados
            st.markdown(f"- {qtd} {'indica√ß√£o' if qtd == 1 else 'indica√ß√µes'} do plano **{a['name']}** ({pontos_gerados} pts cada)")
